server:
  port: 8082

spring:
  # Define the datasource, for this development profile we will use an in-memory h2 database
  datasource:
    # url: jdbc:h2:mem:springtest;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    # driver-class-name: org.h2.Driver
    url: jdbc:mysql://localhost:3306/springdb
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: password
  # Enable the h2-console and can give it an alternative path
#  h2:
#    console:
#      enabled: true
#      settings:
#        web-allow-others: true
#      path: /console
  jpa:
    # database-platform: org.hibernate.dialect.H2Dialect
    database: mysql
    show-sql: true
    # Hibernate ensure spring does not handle creating the database.
    # It ensures liquibase is dealing with it all on it's own.
    hibernate:
      # ddl-auto: create  -> Using create will drop the current schema and use the new one. For dev purposes this is annoying so change to update.
      ddl-auto: update


  # Need to enable liquibase and give it a username and password to talk to the database with
  # Changelog master is also defined for springboot
  # To be fair I am not sure if using liquibase makes sense for this project, but might still make sense in terms of explaining the benefits and why it was explored in the first place.
  liquibase:
    enabled: false
    user: root
    password: password
    change-log: classpath:/db/changelog/changelog-master.yml

logging:
  level:
    root: DEBUG