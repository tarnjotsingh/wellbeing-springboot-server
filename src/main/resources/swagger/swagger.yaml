swagger: '2.0'
info:
  description: >-
    Server for student wellbeing application.
  version: 1.0k.0
  title: Student mental health survey API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: gv009864@reading.ac.uk
  # license:
  #   name: Apache 2.0
  #   url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    
host: wellbeing.swagger.io

basePath: /v2

tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
  
  - name: survey
    description: Manage surveys in database
    
  
      
schemes:
  - https
  - http
  
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

  /survey:
    post:
      tags:
        - survey
      summary: Create a new survey
      description: This can only be done by users of type EXPERT
      operationId: createSurvey
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Create survey object
          required: true
          schema:
            $ref: '#/definitions/Survey'
      responses:
        200:
          description: Success
          
  /survey/createWithArray:
    post:
      tags:
        - survey
      summary: Creates a collection of surveys given input array
      description: ''
      operationId: createSurveysWithArrayInput
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of survey objects
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Survey'
      responses:
        default:
          description: successful operation
  '/survey/{survey_id}':
    get:
      tags:
        - survey
      summary: Get a survey by id
      description: ''
      operationId: getSurveyById
      produces:
        - application/json
      parameters:
        - name: survey_id
          in: path
          description: 'The id that needs to be fetched. Use survey1 for testing. '
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Survey'
        '400':
          description: Invalid survey id supplied
        '404':
          description: Survey not found
    put:
      tags:
        - survey
      summary: Updated survey
      description: This can only be done by the authorised user.
      operationId: updateSurvey
      produces:
        - application/json
      parameters:
        - name: survey_id
          in: path
          description: survey that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/Survey'
      responses:
        '400':
          description: Invalid survey id supplied
        '404':
          description: Survey not found
    delete:
      tags:
        - survey
      summary: Delete survey
      description: This can only be done by the aurthorised use.
      operationId: deleteSurvey
      produces:
        - application/json
      parameters:
        - name: survey_id
          in: path
          description: The survey that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid survey id supplied
        '404':
          description: Survey not found

securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://wellbeing.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:surveys': modify surveys in your account
      'read:surveys': read existing surveys
  api_key:
    type: apiKey
    name: api_key
    in: header

definitions:
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
      
  Survey:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: Survey1
      description:
        type: string
        example: Survey measuring level of stress
      # This is a One to Many relationship
      # Need to figure out how to do this properly
      questions:
        type: string
        
  Question:
    type: object
    required:
      - question
    properties:
      id:
        type: integer
        format: int64
      question: 
        type: string
        example: What is your favorite snack?
      # This is a One to Many relationship
      # Need to figure out how to do this properly
      userQuestionChoices:
        type: string
          
  
  QuestionChoice:
    type: object
    required:
      - choice
    properties:
      id:
        type: integer
        format: int64
      choice:
        type: string
        example: Potato crisps
      weight:
        type: integer
        format: int32
      # Many to One relationship with a question
      question:
        type: string
  
      
  Pet:
    type: object
    required:
      - name
      - photoUrls
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: pet status in the store
        enum:
          - available
          - pending
          - sold
    xml:
      name: Pet
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
        
externalDocs:

  description: Find out more about Swagger
  url: 'http://swagger.io'
