swagger: '2.0'
info:
  description: Student wellbeing application API
  version: '1.0'
  title: Api Documentation
  termsOfService: 'urn:tos'
  contact: {
    name: 'Tarnjot Singh Virdee (24009864)',
    email: 'gv009864@reading.ac.uk'
  }
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
host: 'localhost:8082'
basePath: /
tags:
  - name: choice-resource
    description: Choice Resource
  - name: multiple-auth-resource
    description: Multiple Auth Resource
  - name: question-resource
    description: Question Resource
  - name: survey-resource
    description: Survey Resource
  - name: user-question-choice-resource
    description: User Question Choice Resource
  - name: user-resource
    description: User Resource
paths:
  /api:
    get:
      tags:
        - user-resource
      summary: test
      operationId: testUsingGET_1
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/choices:
    get:
      tags:
        - choice-resource
      summary: getAllChoices
      operationId: getAllChoicesUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Choice'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    post:
      tags:
        - choice-resource
      summary: createChoice
      operationId: createChoiceUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: choice
          description: choice
          required: true
          schema:
            $ref: '#/definitions/Choice'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Choice'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    put:
      tags:
        - choice-resource
      summary: updateChoice
      operationId: updateChoiceUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: choice
          description: choice
          required: true
          schema:
            $ref: '#/definitions/Choice'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Choice'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/choices/{id}':
    get:
      tags:
        - choice-resource
      summary: getChoice
      operationId: getChoiceUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Choice'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    delete:
      tags:
        - choice-resource
      summary: deleteChoice
      operationId: deleteChoiceUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /api/ping:
    get:
      tags:
        - multiple-auth-resource
      summary: getPing
      operationId: getPingUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/questions:
    get:
      tags:
        - question-resource
      summary: getAllQuestions
      operationId: getAllQuestionsUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    post:
      tags:
        - question-resource
      summary: createQuestion
      operationId: createQuestionUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: question
          description: question
          required: true
          schema:
            $ref: '#/definitions/Question'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Question'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    put:
      tags:
        - question-resource
      summary: updateQuestion
      operationId: updateQuestionUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: question
          description: question
          required: true
          schema:
            $ref: '#/definitions/Question'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Question'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/questions/{id}':
    get:
      tags:
        - question-resource
      summary: getQuestion
      operationId: getQuestionUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Question'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /api/surveys:
    get:
      tags:
        - survey-resource
      summary: getAllSurveys
      operationId: getAllSurveysUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Survey'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    post:
      tags:
        - survey-resource
      summary: createSurvey
      operationId: createSurveyUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: survey
          description: survey
          required: true
          schema:
            $ref: '#/definitions/Survey'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Survey'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    put:
      tags:
        - survey-resource
      summary: updateSurvey
      operationId: updateSurveyUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: survey
          description: survey
          required: true
          schema:
            $ref: '#/definitions/Survey'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Survey'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/surveys/{id}':
    get:
      tags:
        - survey-resource
      summary: getSurvey
      operationId: getSurveyUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Survey'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    delete:
      tags:
        - survey-resource
      summary: deleteSurvey
      operationId: deleteSurveyUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  '/api/surveys/{surveyId}/questions':
    get:
      tags:
        - question-resource
      summary: getAllQuestionsByServerId
      operationId: getAllQuestionsByServerIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: surveyId
          in: path
          description: surveyId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    post:
      tags:
        - question-resource
      summary: createQuestionForSurvey
      operationId: createQuestionForSurveyUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: question
          description: question
          required: true
          schema:
            $ref: '#/definitions/Question'
        - name: surveyId
          in: path
          description: surveyId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Question'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    put:
      tags:
        - question-resource
      summary: updatedQuestion
      operationId: updatedQuestionUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: surveyId
          in: path
          description: surveyId
          required: true
          type: integer
          format: int64
        - in: body
          name: updatedQuestion
          description: updatedQuestion
          required: true
          schema:
            $ref: '#/definitions/Question'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Question'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/surveys/{surveyId}/questions/{questionId}':
    get:
      tags:
        - question-resource
      summary: getQuestionById
      operationId: getQuestionByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: questionId
          in: path
          description: questionId
          required: true
          type: integer
          format: int64
        - name: surveyId
          in: path
          description: surveyId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Question'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    delete:
      tags:
        - question-resource
      summary: deleteQuestion
      operationId: deleteQuestionUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: questionId
          in: path
          description: questionId
          required: true
          type: integer
          format: int64
        - name: surveyId
          in: path
          description: surveyId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  '/api/surveys/{surveyId}/questions/{questionId}/choices':
    get:
      tags:
        - choice-resource
      summary: getAllChoicesForSurveyQuestion
      operationId: getAllChoicesForSurveyQuestionUsingGET
      produces:
        - '*/*'
      parameters:
        - name: questionId
          in: path
          description: questionId
          required: true
          type: integer
          format: int64
        - name: surveyId
          in: path
          description: surveyId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Choice'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    post:
      tags:
        - choice-resource
      summary: createChoiceForSurveyQuestion
      operationId: createChoiceForSurveyQuestionUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: newChoice
          description: newChoice
          required: true
          schema:
            $ref: '#/definitions/Choice'
        - name: questionId
          in: path
          description: questionId
          required: true
          type: integer
          format: int64
        - name: surveyId
          in: path
          description: surveyId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Choice'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    put:
      tags:
        - choice-resource
      summary: updateChoiceForSurveyQuestion
      operationId: updateChoiceForSurveyQuestionUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: questionId
          in: path
          description: questionId
          required: true
          type: integer
          format: int64
        - name: surveyId
          in: path
          description: surveyId
          required: true
          type: integer
          format: int64
        - in: body
          name: updatedChoice
          description: updatedChoice
          required: true
          schema:
            $ref: '#/definitions/Choice'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Choice'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/surveys/{surveyId}/questions/{questionId}/choices/{choiceId}':
    get:
      tags:
        - choice-resource
      summary: getChoiceForSurveyQuestion
      operationId: getChoiceForSurveyQuestionUsingGET
      produces:
        - '*/*'
      parameters:
        - name: choiceId
          in: path
          description: choiceId
          required: true
          type: integer
          format: int64
        - name: questionId
          in: path
          description: questionId
          required: true
          type: integer
          format: int64
        - name: surveyId
          in: path
          description: surveyId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Choice'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    delete:
      tags:
        - choice-resource
      summary: deleteChoiceForSurveyQuestion
      operationId: deleteChoiceForSurveyQuestionUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: choiceId
          in: path
          description: choiceId
          required: true
          type: integer
          format: int64
        - name: questionId
          in: path
          description: questionId
          required: true
          type: integer
          format: int64
        - name: surveyId
          in: path
          description: surveyId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /api/user-question-choices:
    get:
      tags:
        - user-question-choice-resource
      summary: getAllUserQuestionChoices
      operationId: getAllUserQuestionChoicesUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/UserQuestionChoice'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    post:
      tags:
        - user-question-choice-resource
      summary: createUserQuestionChoice
      operationId: createUserQuestionChoiceUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: userQuestionChoice
          description: userQuestionChoice
          required: true
          schema:
            $ref: '#/definitions/UserQuestionChoice'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserQuestionChoice'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    put:
      tags:
        - user-question-choice-resource
      summary: updateUserQuestionChoice
      operationId: updateUserQuestionChoiceUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: userQuestionChoice
          description: userQuestionChoice
          required: true
          schema:
            $ref: '#/definitions/UserQuestionChoice'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserQuestionChoice'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  '/api/user-question-choices/{id}':
    get:
      tags:
        - user-question-choice-resource
      summary: getUserQuestionChoice
      operationId: getUserQuestionChoiceUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/UserQuestionChoice'
      deprecated: false
    delete:
      tags:
        - user-question-choice-resource
      summary: deleteUserQuestionChoice
      operationId: deleteUserQuestionChoiceUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false
  /api/users:
    get:
      tags:
        - user-resource
      summary: all
      operationId: allUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Users'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
    post:
      tags:
        - user-resource
      summary: persist
      operationId: persistUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: users
          description: users
          required: true
          schema:
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Users'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
definitions:
  Choice:
    type: object
    properties:
      choice:
        type: string
      id:
        type: integer
        format: int64
      weight:
        type: integer
        format: int32
    title: Choice
  ModelAndView:
    type: object
    properties:
      empty:
        type: boolean
      model:
        type: object
      modelMap:
        type: object
        additionalProperties:
          type: object
      reference:
        type: boolean
      status:
        type: string
        enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
      view:
        $ref: '#/definitions/View'
      viewName:
        type: string
    title: ModelAndView
  OAuth2AccessToken:
    type: object
    properties:
      additionalInformation:
        type: object
      expiration:
        type: string
        format: date-time
      expired:
        type: boolean
      expiresIn:
        type: integer
        format: int32
      refreshToken:
        $ref: '#/definitions/OAuth2RefreshToken'
      scope:
        type: array
        items:
          type: string
      tokenType:
        type: string
      value:
        type: string
    title: OAuth2AccessToken
  OAuth2RefreshToken:
    type: object
    properties:
      value:
        type: string
    title: OAuth2RefreshToken
  Question:
    type: object
    properties:
      id:
        type: integer
        format: int64
      question:
        type: string
      questionChoices:
        type: array
        items:
          $ref: '#/definitions/Choice'
      userQuestionChoices:
        type: array
        items:
          $ref: '#/definitions/UserQuestionChoice'
    title: Question
  Survey:
    type: object
    properties:
      description:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      questions:
        type: array
        items:
          $ref: '#/definitions/Question'
      surveys:
        type: array
        items:
          $ref: '#/definitions/Question'
    title: Survey
  UserQuestionChoice:
    type: object
    properties:
      choice:
        $ref: '#/definitions/Choice'
      id:
        type: integer
        format: int64
      question:
        $ref: '#/definitions/Question'
      timeStamp:
        type: integer
        format: int64
    title: UserQuestionChoice
  Users:
    type: object
    properties:
      active:
        type: boolean
      id:
        type: integer
        format: int64
      password:
        type: string
      username:
        type: string
    title: Users
  View:
    type: object
    properties:
      contentType:
        type: string
    title: View
