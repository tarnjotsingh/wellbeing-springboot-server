buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.liquibase:liquibase-gradle-plugin:2.0.1")
	}
}
// Should realy stick to using the plugins block since it's the new way of importing plugins to gradle.
plugins {
	id "org.detoeuf.swagger-codegen" version "1.7.4"
}
//Swagger will only generate the Interface classes to extend from, askin to how header files are separate from the implementation in c++
//I would ditch the idea of using swagger to generate the API interface class and just focus on a manual implemntation
//TODO Get an React client up and running for an initial prototype to demo.

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.liquibase.gradle'

group = 'com.reading.tvirdee.project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	
	compile('org.springframework.boot:spring-boot-starter')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.data:spring-data-rest-core')
	compile('com.auth0:auth0-spring-security-api:1.0.0-rc.3')
	compile('io.springfox:springfox-core:2.9.2')
	compile('com.h2database:h2')
	compile('mysql:mysql-connector-java')
	compile('org.zalando:problem-spring-web:0.24.0-RC.0')
	compile('io.dropwizard.metrics:metrics-core:4.0.5')
	compile('io.dropwizard.metrics:metrics-annotation:4.0.5')
	compile('org.projectlombok:lombok:1.18.4')

	liquibaseRuntime('org.liquibase:liquibase-core')
	liquibaseRuntime('org.liquibase:liquibase-groovy-dsl:2.0.1')
	liquibaseRuntime('org.liquibase.ext:liquibase-hibernate5:3.6')
	liquibaseRuntime("org.springframework.boot:spring-boot:2.0.1.RELEASE")
	liquibaseRuntime('org.springframework:spring-orm:5.0.5.RELEASE')
	liquibaseRuntime('mysql:mysql-connector-java')
	liquibaseRuntime('com.h2database:h2')
	/* Due to a bit of a bug with the liquibase-gradle-plugin, need to explicitly state 
	  src/main as a dependency for the plugin to work correctly. */
	liquibaseRuntime files('src/main')
	
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

// Liquibase task to allow connecting to the specified local mysql database
liquibase {
	activities {
		main {
			driver 'com.mysql.cj.jdbc.Driver'
			url 'jdbc:mysql://localhost:3306/springdb'
			username 'root'
			password 'password'
			referenceUrl 'hibernate:spring:com.reading.tvirdee' +
					'?dialect=org.hibernate.dialect.MySQL5Dialect' +
					'&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy' +
					'&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy'
			changeLogFile 'src/main/resources/db/changelog/changelog-master.yml'
		}
	}
}

swagger {
	inputSpec = 'http://petstore.swagger.io/v2/swagger.json'
	outputDir = file('build/swagger')
	lang = 'java'

	additionalProperties = [
			'apiPackage' : 'ondra.spc.integration.client.api',
			'dateLibrary' : 'java8',
			'hideGenerationTimestamp': 'true',
			'invokerPackage' : 'ondra.spc.integration.client',
			'library' : 'resttemplate',
			'modelNameSuffix' : 'Dto',
			'modelPackage' : 'ondra.spc.integration.client.model'
	]
	importMappings = [
			'Dog': 'io.swagger.petstore.client.model.Dog'
	]
}